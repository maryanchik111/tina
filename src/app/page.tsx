"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Question = {
  question: string;
  options: string[];
  correct: number;
};

export default function Home() {
  const [showImage, setShowImage] = useState(true);
  const [stage, setStage] = useState<"question" | "no" | "quiz" | "find" | "done" | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [input, setInput] = useState("");

  // –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏
  const [hintStage, setHintStage] = useState<"locked" | "question" | "shown" | null>(null);
  const [hintInput, setHintInput] = useState("");

  const correctPhrase = "–¢–Ü–®–ö–ê –¢–û–ü";

  const randomText1 = "–æ–ø–≤–∞–ø–ª–∞–ø–∞–ª–≤–¥–∞–ª–≤–¥–ª–æ–ª–≤–∞–ø–ª–≤–∞–ª–≤–¥–æ–ø–∞–ª–∞–ª–æ–≤–¥–æ–∞–ª–≤–∞–æ—Ä–ª–≤–∞–æ–ª–≤–∞–æ–≤–ª–∞–æ–≤–∞–≤–ª—Ç—ñ—à–∫–∞–æ–∞–≤–∞–ª–≤–æ–∞–≤–æ–ª–∞–æ–≤—Ä–æ–∞—Ä–≤–∞–æ—Ä–≤–æ–∞–≤—Ä–∞–≤–æ–∞–≤–∞–≤–∞–≤–∞–≤–∞–≤–∞–≤–∞–≤–∞–≤–∞–≤–∞–æ—Ä–ø—Ä–∞–≤–æ–∞–æ–≤–∞–¥–ª–∞";
  const randomText2 = "–æ–ª–≤–ø–∞–≤–ª–∞–æ–∞–ª–≤–¥–ø—Ç–æ–ø–ª–∞–≤–¥–æ–ª–≤–¥–ø–∞–æ–ø–≤–ª–¥–ø–≤–ª–æ–∞–æ–≤–ª–∞—Ä–≤–æ—Ä–∞–¥—ñ–∞—Ä–æ–≤–∞–æ–≤–∞–ª–≤—Ä–∞–æ–≤–∞–≤–¥–∞–æ–ª—Ä–æ–≤–∞—Ä–≤–æ–∞–∞–ª–∞–æ–≤–∞—Ä–≤–∞–æ–≤–ª–∞–æ–≤–ª–∞–≤–ª–∞–≤–ø—Ä–æ–∞–≤–¥–∞–ª—Ä–ø–≤–∞—Ä–æ–≤–∞–≤–æ–∞–≤—Ä–ª–∞–ª–≤–∞–∞–≤–æ—Ä–∞";

  const questions: Question[] = [
    { question: "–°—Ç–æ–ª–∏—Ü—è –§—Ä–∞–Ω—Ü—ñ—ó?", options: ["–ë–µ—Ä–ª—ñ–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º", "–ü—Ä–∞–≥–∞"], correct: 1 },
    { question: "–•—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ ¬´–ö–æ–±–∑–∞—Ä¬ª?", options: ["–Ü–≤–∞–Ω –§—Ä–∞–Ω–∫–æ", "–õ–µ—Å—è –£–∫—Ä–∞—ó–Ω–∫–∞", "–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ", "–ì—Ä–∏–≥–æ—Ä—ñ–π –°–∫–æ–≤–æ—Ä–æ–¥–∞"], correct: 2 },
    { question: "–Ø–∫–∞ —Ö—ñ–º—ñ—á–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥–∏?", options: ["H‚ÇÇO", "CO‚ÇÇ", "O‚ÇÇ", "NaCl"], correct: 0 },
    { question: "–£ —è–∫–æ–º—É —Ä–æ—Ü—ñ –ø–æ—á–∞–ª–∞—Å—è –î—Ä—É–≥–∞ —Å–≤—ñ—Ç–æ–≤–∞ –≤—ñ–π–Ω–∞?", options: ["1935", "1939", "1941", "1945"], correct: 1 },
    { question: "–Ø–∫–∏–π –æ–∫–µ–∞–Ω –Ω–∞–π–±—ñ–ª—å—à–∏–π –Ω–∞ –ó–µ–º–ª—ñ?", options: ["–Ü–Ω–¥—ñ–π—Å—å–∫–∏–π", "–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –õ—å–æ–¥–æ–≤–∏—Ç–∏–π", "–ê—Ç–ª–∞–Ω—Ç–∏—á–Ω–∏–π", "–¢–∏—Ö–∏–π"], correct: 3 },
  ];

  // –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏
  const hintQuestion = {
    question: "—à–æ –∫–∞–∂—É—Ç—å, –∫–æ–ª–∏ —Å–ø—ñ—à–∞—Ç—å?",
    correctAnswer: "–±–∏—Å—Ç—Ä—î—î", // —Å—é–¥–∏ –¥–æ–¥–∞—à —Å–≤–æ—é –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  };

  const sendTelegramMessage = async (text: string) => {
    try {
      await fetch("/api/tg", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: text }),
      });
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", err);
    }
  };

  // —Å—Ç–∞—Ä—Ç–æ–≤–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowImage(false);
      setStage("question");
      sendTelegramMessage("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤ —Å–∞–π—Ç üåê");
    }, 3000);
    return () => clearTimeout(timer);
  }, []);

  // –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç–µ—Å—Ç
  const handleAnswer = (index: number) => {
    const correct = questions[currentQuestion].correct;
    if (index === correct) setScore((prev) => prev + 1);

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion((prev) => prev + 1);
    } else {
      if (score + 1 === questions.length) setStage("find");
      else setStage("no");
    }
  };

  // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—Ä–∞–∑–∏
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (input.trim().toUpperCase() === correctPhrase) {
      setStage("done");
      sendTelegramMessage("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ–π—à–æ–≤ –≥—Ä—É ‚úÖ");
    } else {
      alert("–Ω–µ —É–≥–∞–¥–∞–ª–∞");
      setInput("");
    }
  };

  // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø—ñ–¥–∫–∞–∑–∫—É
  const handleHintSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (hintInput.trim().toLowerCase() === hintQuestion.correctAnswer.toLowerCase()) {
      setHintStage("shown");
      sendTelegramMessage("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—Ç—Ä–∏–º–∞–≤ –ø—ñ–¥–∫–∞–∑–∫—É üí°");
    } else {
      alert("–ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!");
      setHintInput("");
    }
  };

  return (
    <div className="flex flex-col items-center justify-center h-screen text-center px-4">
      {showImage ? (
        <Image src="/images.jpeg" alt="Loading image" width={400} height={400} className="object-contain" />
      ) : stage === "question" ? (
        <div>
          <p className="text-2xl mb-6">–•–æ—á–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ?</p>
          <p>all of the stars have a reason</p>
          <p>a reasonto shine, a reason like yours</p>
          <div className="flex gap-4 justify-center">
            <button onClick={() => setStage("quiz")} className="bg-green-500 text-white px-6 py-2 rounded-2xl hover:bg-green-600 transition">–¢–∞–∫</button>
            <button onClick={() => setStage("no")} className="bg-gray-400 text-white px-6 py-2 rounded-2xl hover:bg-gray-500 transition">–ù—ñ</button>
          </div>
        </div>
      ) : stage === "no" ? (
        <p className="text-xl text-gray-700">–æ–∫</p>
      ) : stage === "quiz" ? (
        <div className="max-w-md">
          <p className="text-xl mb-4">{questions[currentQuestion].question}</p>
          <div className="flex flex-col gap-3">
            {questions[currentQuestion].options.map((option, index) => (
              <button key={index} onClick={() => handleAnswer(index)} className="border border-gray-400 px-4 py-2 rounded-xl hover:bg-blue-100 transition">{option}</button>
            ))}
          </div>
          <p className="mt-4 text-gray-500 text-sm">–ü–∏—Ç–∞–Ω–Ω—è {currentQuestion + 1} –∑ {questions.length}</p>
        </div>
      ) : stage === "find" ? (
        <div className="max-w-md">
          <p className="text-xl mb-4">üîç –ó–Ω–∞–π–¥–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–ª–æ–≤–∞ —Å–µ—Ä–µ–¥ —Ö–∞–æ—Å—É –±—É–∫–≤:</p>
          <div className="rounded-2xl px-4 font-mono break-words">{randomText1}</div>
          <div className="rounded-2xl px-4 font-mono break-words mb-6">{randomText2}</div>

          <form onSubmit={handleSubmit} className="flex gap-2 justify-center">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="–í–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –ø–æ–≤–Ω—ñ—Å—Ç—é..."
              className="border border-gray-300 rounded-xl px-4 py-2 w-60 focus:outline-none focus:border-green-500"
            />
            <button type="submit" className="bg-green-500 text-white px-4 py-2 rounded-xl hover:bg-green-600 transition">OK</button>
          </form>
        </div>
      ) : stage === "done" ? (
        <div className="text-2xl font-bold text-green-600 flex flex-col items-center gap-4">
          üéâ –¢–Ü–®–ö–ê –¢–û–ü!
          <p className="text-gray-600 mt-2">–æ–∫–∞–∫, –∞ —Ç–∏ —Å–º–∏—à–ª—å–æ–Ω–Ω–∞</p>
          <p className="text-gray-600">–∞–ª–µ –Ω–∞ —Ü—å–æ–º—É —ñ–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, —Å–æ—Ä—ñ</p>
          <p className="text-gray-600 mt-2">–Ω–∞—Å—Ç—É–ø–Ω–∞ —ñ–≥—Ä–∞ –±—É–¥–µ 22 –∂–æ–≤—Ç–Ω—è</p>

          {hintStage !== "shown" && (
              <div className="flex flex-col items-center mt-4">
                <button
                  onClick={() => setHintStage("question")}
                  className="w-20 h-20 bg-gray-200 rounded-full flex items-center justify-center hover:bg-gray-300 transition"
                >
                  <Image src="/minion.svg" alt="Minion hint" width={40} height={40} />
                </button>
                <p className="mt-2 text-gray-700 text-sm">–≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É</p>
              </div>
            )}


          {hintStage === "question" && (
            <form onSubmit={handleHintSubmit} className="mt-4 flex flex-col items-center gap-2 max-w-md">
              <p className="text-lg mb-2">{hintQuestion.question}</p>
              <input
                type="text"
                value={hintInput}
                onChange={(e) => setHintInput(e.target.value)}
                placeholder="–í–≤–µ–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å..."
                className="border border-gray-300 rounded-xl px-4 py-2 w-60 focus:outline-none focus:border-yellow-500"
              />
              <button type="submit" className="bg-yellow-400 text-white px-4 py-2 rounded-xl hover:bg-yellow-500 transition">OK</button>
            </form>
          )}

          {hintStage === "shown" && (
            <div className="mt-4 p-4 bg-yellow-100 rounded-xl max-w-md">
              <p className="text-gray-700">–æ–∫–∞–∫</p>
              <p className="text-gray-700">–æ–∫, —è–∫ –¥–æ–º–æ–≤–ª—è–ª–∏—Å—å</p>
              <p className="text-gray-700">—Ç–∏ –≤–∂–µ —ó—ó –±–∞—á–∏–ª–∞</p>
            </div>
          )}
        </div>
      ) : null}
    </div>
  );
}
